{
    "capas_definicion": {"texto":"La arquitectura en capas organiza el software en niveles con responsabilidades claras.","fonetica":"la aɾkitekˈtuɾa en ˈkapas oɾɣaniˈθa el ˈsoftweɾ en ˈnjeβeles kon responsabiliˈðaðes ˈklaɾas"},
    "capas_historia": {"texto":"El modelo en capas tiene su origen en la ingeniería de sistemas y redes.","fonetica":"el moˈðelo en ˈkapas ˈtjene su oˈɾixen en la iŋxeɾiˈa de sisˈtemas i ˈreðes"},
    "capas_beneficio": {"texto":"El principal beneficio es la separación de responsabilidades.","fonetica":"el pɾinθiˈpal βenefiθio es la sepaɾaˈθjon de responsabiliˈðaðes"},
    "capas_simplificacion": {"texto":"El enfoque en capas simplifica la comprensión del sistema.","fonetica":"el enˈfoke en ˈkapas simpliˈfika la kompɾenˈsjon del sisˈtema"},
    "capas_estandar": {"texto":"El diseño en capas se considera un estándar en la industria de software.","fonetica":"el diˈseɲo en ˈkapas se konsiˈðeɾa un esˈtandaɾ en la inˈdustɾja de ˈsoftweɾ"},
    "capas_mantenimiento": {"texto":"La modularidad en capas facilita el mantenimiento del código.","fonetica":"la moðulaˈriðað en ˈkapas fasilita el mantenimiˈento del ˈkoðigo"},
    "capa_presentacion": {"texto":"La capa de presentación maneja la interacción con el usuario.","fonetica":"la ˈkapa de pɾesentaˈθjon maneja la inteɾakˈθjon kon el usuˈaɾjo"},
    "capa_aplicacion": {"texto":"La capa de aplicación coordina los casos de uso del sistema.","fonetica":"la ˈkapa de apliˈkaθjon koɾðina los ˈkasos de ˈuso del sisˈtema"},
    "capa_dominio": {"texto":"La capa de dominio contiene la lógica de negocio.","fonetica":"la ˈkapa de doˈminjo konˈtjɛne la ˈloxika de neˈɣoθjo"},
    "capa_infraestructura": {"texto":"La capa de infraestructura conecta con bases de datos y servicios externos.","fonetica":"la ˈkapa de infɾaestɾukˈtuɾa koˈnekta kon ˈbases de ˈðatos i seɾˈβisjos eksˈteɾnos"},
    "capas_comunicacion": {"texto":"Las capas se comunican entre sí mediante interfaces claras.","fonetica":"las ˈkapas se komunikaŋ ˈentɾe si meðjante inteɾˈfases ˈklaɾas"},
    "flujo_datos": {"texto":"Los datos fluyen entre capas de manera controlada.","fonetica":"los ˈðatos ˈflujen ˈentɾe ˈkapas de maneɾa kontɾoˈlaða"},
    "independencia": {"texto":"Cada capa es independiente de los detalles de las demás.","fonetica":"ˈkaða ˈkapa es indepenˈðjente de los deˈtaʝes de las deˈmas"},
    "desacoplamiento": {"texto":"El diseño en capas favorece el desacoplamiento de módulos.","fonetica":"el diˈseɲo en ˈkapas faβoˈɾeθe el ðesakoˈplamjento de ˈmoðulos"},
    "capas_reutilizacion": {"texto":"La separación en capas permite reutilizar componentes.","fonetica":"la sepaɾaˈθjon en ˈkapas peɾˈmite reu̯t̪iliˈθaɾ komponˈentes"},
    "mantenibilidad": {"texto":"Una arquitectura en capas mejora la mantenibilidad del sistema.","fonetica":"una aɾkitekˈtuɾa en ˈkapas meˈxoɾa la mantenibiliˈðað del sisˈtema"},
    "pruebas_faciles": {"texto":"La separación por capas facilita la realización de pruebas.","fonetica":"la sepaɾaˈθjon poɾ ˈkapas fasilita la realiθaˈθjon de ˈpɾweβas"},
    "capas_escalabilidad": {"texto":"La arquitectura en capas mejora la escalabilidad del software.","fonetica":"la aɾkitekˈtuɾa en ˈkapas meˈxoɾa la eskalaβiliˈðað del ˈsoftweɾ"},
    "capas_flexibilidad": {"texto":"La división en capas aporta flexibilidad en el desarrollo.","fonetica":"la diβiˈsjon en ˈkapas aˈpoɾta fleksibiliˈðað en el deθaˈʝo"},
    "capas_abstraccion": {"texto":"Cada capa actúa como una abstracción de la inferior.","fonetica":"ˈkaða ˈkapa akˈtwa komo ˈuna aps̪tɾakˈθjon de la infeˈɾjoɾ"},
    "capas_reemplazo": {"texto":"Una capa puede reemplazarse sin afectar a las demás.","fonetica":"ˈuna ˈkapa ˈpweðe reemplaˈθaɾse sin afekˈtaɾ a las deˈmas"},
    "capas_ejemplo_ui": {"texto":"En la capa de presentación se encuentran las pantallas y formularios.","fonetica":"en la ˈkapa de pɾesentaˈθjon se enˈkwentɾan las panˈtaʝas i foɾmulaˈɾjos"},
    "capas_ejemplo_negocio": {"texto":"En la capa de dominio están las reglas de negocio.","fonetica":"en la ˈkapa de doˈminjo esˈtan las ˈreglas de neˈɣoθjo"},
    "capas_ejemplo_datos": {"texto":"En la capa de infraestructura se accede a las bases de datos.","fonetica":"en la ˈkapa de infɾaestɾukˈtuɾa se akˈseðe a las ˈbases de ˈðatos"},
    "capas_intercambio": {"texto":"El intercambio de información se hace mediante interfaces bien definidas.","fonetica":"el inteɾˈkanβjo de infoɾmaˈθjon se aˈse meðjante inteɾˈfases ˈbjen ðefiˈniðas"},
    "capas_regla_direccion": {"texto":"En la arquitectura en capas, las dependencias deben ir siempre hacia abajo.","fonetica":"en la aɾkitekˈtuɾa en ˈkapas las depenˈðjenθjas ˈdeβen iɾ ˈsjempɾe aθja ˈðaβaxo"},
    "capas_transversal": {"texto":"Algunas funcionalidades transversales como logging atraviesan varias capas.","fonetica":"alˈɣunas funθjonaˈliðaðes tɾansβeɾˈsales komo ˈloɣin atɾaˈβjesan ˈβaɾjas ˈkapas"},
    "capas_evolucion": {"texto":"Una arquitectura en capas facilita la evolución del sistema en el tiempo.","fonetica":"ˈuna aɾkitekˈtuɾa en ˈkapas fasilita la eβoluˈθjon del sisˈtema en el ˈtjempo"},
    "capas_reduccion_errores": {"texto":"Dividir en capas reduce los errores de integración.","fonetica":"ðiβiˈðiɾ en ˈkapas reˈðuθe los eˈrores de inteɣɾaˈθjon"}
,
    "capas_proteccion": {"texto":"Las capas funcionan como barreras que protegen la lógica interna.","fonetica":"las ˈkapas funθjoˈnan komo βareˈɾas ke pɾoteˈxen la ˈloxika inˈteɾna"},
    "capas_regla_dependencias": {"texto":"Las dependencias siempre deben apuntar hacia capas inferiores.","fonetica":"las depenˈðjenθjas ˈsjempɾe ˈdeβen apunˈtaɾ aθja ˈkapas infeˈɾjoɾes"},
    "capas_ui_independiente": {"texto":"La interfaz de usuario debe cambiar sin afectar la lógica de negocio.","fonetica":"la inteɾˈfas de usuˈaɾjo ˈdeβe kamˈbjaɾ sin afekˈtaɾ la ˈloxika de neˈɣoθjo"},
    "capas_db_independiente": {"texto":"El motor de base de datos puede cambiar sin alterar el dominio.","fonetica":"el moˈtoɾ de ˈbase de ˈðatos ˈpweðe kamˈbjaɾ sin alteˈɾaɾ el doˈminjo"},
    "capas_ui_funcion": {"texto":"La capa de presentación traduce acciones del usuario en comandos de aplicación.","fonetica":"la ˈkapa de pɾesentaˈθjon tɾaðuˈθe akˈθjones del usuˈaɾjo en koˈmandos de apliˈkaθjon"},
    "capas_aplicacion_funcion": {"texto":"La capa de aplicación orquesta el flujo entre usuario y dominio.","fonetica":"la ˈkapa de apliˈkaθjon oɾˈkesta el ˈflwxo ˈentɾe usuˈaɾjo i doˈminjo"},
    "capas_dominio_funcion": {"texto":"La capa de dominio asegura que las reglas de negocio se cumplan.","fonetica":"la ˈkapa de doˈminjo aseˈɣuɾa ke las ˈreglas de neˈɣoθjo se ˈkumplan"},
    "capas_infraestructura_funcion": {"texto":"La capa de infraestructura implementa detalles técnicos externos.","fonetica":"la ˈkapa de infɾaestɾukˈtuɾa impleˈmenta deˈtaʝes ˈtekni̯kos eksˈteɾnos"},
    "capas_cambio_presentacion": {"texto":"Se puede cambiar la interfaz gráfica sin tocar el dominio.","fonetica":"se ˈpweðe kamˈbjaɾ la inteɾˈfas ˈgɾafika sin toˈkaɾ el doˈminjo"},
    "capas_cambio_datos": {"texto":"Cambiar de motor de base de datos no afecta la capa de dominio.","fonetica":"kamˈbjaɾ de moˈtoɾ de ˈbase de ˈðatos no aˈfekta la ˈkapa de doˈminjo"},
    "capas_complejidad": {"texto":"Una desventaja es que demasiadas capas pueden añadir complejidad.","fonetica":"ˈuna ðesβenˈtaxa es ke ðemaˈsjadas ˈkapas ˈpweden aɲaðiɾ komplexiˈðað"},
    "capas_rendimiento": {"texto":"El uso de múltiples capas puede afectar el rendimiento si no se optimiza.","fonetica":"el ˈuso de ˈmultipl̪es ˈkapas ˈpwede afekˈtaɾ el renðiˈmjento si no se optimiˈθa"},
    "capas_disciplina": {"texto":"El diseño en capas requiere disciplina en la organización del código.","fonetica":"el diˈseɲo en ˈkapas reˈkjeɾe ðisθipliˈna en la oɾɣaniθaˈθjon del ˈkoðigo"},
    "capas_tres_niveles": {"texto":"Un enfoque común es la arquitectura de tres capas: presentación, lógica y datos.","fonetica":"un enˈfoke koˈmun es la aɾkitekˈtuɾa de tɾes ˈkapas pɾesentaˈθjon ˈloxika i ˈðatos"},
    "capas_cuatro_niveles": {"texto":"Otra variante agrega la capa de aplicación como intermediaria.","fonetica":"ˈotɾa βaˈɾjante aˈɣɾeɣa la ˈkapa de apliˈkaθjon komo inteɾmeˈðaɾja"},
    "capas_modelo_clasico": {"texto":"El modelo clásico separa presentación, lógica de negocio y datos.","fonetica":"el moˈðelo ˈklasiko seˈpaɾa pɾesentaˈθjon ˈloxika de neˈɣoθjo i ˈðatos"},
    "capas_frontera": {"texto":"Cada capa marca una frontera clara en el sistema.","fonetica":"ˈkaða ˈkapa ˈmaɾka ˈuna fɾonˈteɾa ˈklaɾa en el sisˈtema"},
    "capas_mensajes": {"texto":"Las capas intercambian información mediante mensajes o llamadas.","fonetica":"las ˈkapas inteɾˈkanβjan infoɾmaˈθjon meðjante menˈsaxes o ʝaˈmaðas"},
    "capas_interfaces": {"texto":"Las interfaces entre capas son contratos bien definidos.","fonetica":"las inteɾˈfases ˈentɾe ˈkapas son konˈtɾaktos ˈbjen ðefiˈniðos"},
    "capas_sustitucion": {"texto":"Se puede sustituir una capa siempre que mantenga el contrato definido.","fonetica":"se ˈpweðe sustitut̪iɾ ˈuna ˈkapa ˈsjempɾe ke manˈteŋga el konˈtɾakto ðefiˈniðo"},
    "capas_testing": {"texto":"Las pruebas unitarias se simplifican con una arquitectura en capas.","fonetica":"las ˈpɾweβas uniˈtaɾjas se simpliˈfikan kon ˈuna aɾkitekˈtuɾa en ˈkapas"},
    "capas_mocks": {"texto":"Las capas permiten usar mocks para aislar dependencias.","fonetica":"las ˈkapas peɾˈmiten uˈsaɾ ˈmoks paɾa aisˈlaɾ depenˈðjenθjas"},
    "capas_modularidad": {"texto":"El diseño en capas fomenta la modularidad del software.","fonetica":"el diˈseɲo en ˈkapas foˈmenta la moðulaˈriðað del ˈsoftweɾ"},
    "capas_resiliencia": {"texto":"La separación en capas mejora la resiliencia del sistema.","fonetica":"la sepaɾaˈθjon en ˈkapas meˈxoɾa la resiˈljɛnθja del sisˈtema"},
    "capas_documentacion": {"texto":"La estructura en capas facilita documentar el sistema.","fonetica":"la estɾukˈtuɾa en ˈkapas fasilita dokumenˈtaɾ el sisˈtema"},
    "capas_comprension": {"texto":"La división en capas ayuda a comprender mejor la arquitectura.","fonetica":"la diβiˈsjon en ˈkapas aˈjuða a komprenˈdeɾ meˈxoɾ la aɾkitekˈtuɾa"},
    "capas_refactorizacion": {"texto":"El modelo en capas facilita la refactorización del código.","fonetica":"el moˈðelo en ˈkapas fasilita la refaktoɾiθaˈθjon del ˈkoðigo"},
    "capas_reduccion_acoplamiento": {"texto":"Separar en capas reduce el acoplamiento entre partes del sistema.","fonetica":"sepaˈɾaɾ en ˈkapas reˈðuθe el akoplaˈmjento ˈentɾe ˈpaɾtes del sisˈtema"}
,
    "capas_ejemplo_web": {"texto":"En una aplicación web, la capa de presentación son las páginas HTML.","fonetica":"en ˈuna apliˈkaθjon weβ la ˈkapa de pɾesentaˈθjon son las ˈpaxinas a.tʃe.te.eˈme.el"},
    "capas_ejemplo_servicio": {"texto":"La capa de aplicación puede exponer servicios REST o SOAP.","fonetica":"la ˈkapa de apliˈkaθjon ˈpweðe eksˈponeɾ seɾˈβisjos rest o sop"},
    "capas_ejemplo_reglas": {"texto":"La capa de dominio define las reglas que gobiernan el negocio.","fonetica":"la ˈkapa de doˈminjo ðefiˈne las ˈreglas ke ɣoˈβjeɾnan el neˈɣoθjo"},
    "capas_ejemplo_bd": {"texto":"La capa de infraestructura gestiona consultas a la base de datos.","fonetica":"la ˈkapa de infɾaestɾukˈtuɾa xesˈtjona konsulˈtas a la ˈbase de ˈðatos"},
    "capas_ui_web": {"texto":"En la web la capa de presentación incluye formularios y vistas.","fonetica":"en la weβ la ˈkapa de pɾesentaˈθjon inkluˈʝe foɾmulaˈɾjos i ˈβistas"},
    "capas_ui_mobile": {"texto":"En aplicaciones móviles la capa de presentación son pantallas y menús.","fonetica":"en apliˈkaθjones ˈmoβiles la ˈkapa de pɾesentaˈθjon son panˈtaʝas i meˈnus"},
    "capas_servicios": {"texto":"La capa de aplicación suele implementar servicios de negocio.","fonetica":"la ˈkapa de apliˈkaθjon ˈswe.le implemenˈtaɾ seɾˈβisjos de neˈɣoθjo"},
    "capas_dominio_modelos": {"texto":"La capa de dominio contiene entidades y modelos de negocio.","fonetica":"la ˈkapa de doˈminjo konˈtjɛne entiˈðaðes i moˈðelos de neˈɣoθjo"},
    "capas_repo": {"texto":"En la capa de infraestructura se implementan repositorios de datos.","fonetica":"en la ˈkapa de infɾaestɾukˈtuɾa se impleˈmentan repostiˈtoɾjos de ˈðatos"},
    "capas_dependencias_ui": {"texto":"La capa de presentación depende de la capa de aplicación.","fonetica":"la ˈkapa de pɾesentaˈθjon deˈpende de la ˈkapa de apliˈkaθjon"},
    "capas_dependencias_app": {"texto":"La capa de aplicación depende de la capa de dominio.","fonetica":"la ˈkapa de apliˈkaθjon deˈpende de la ˈkapa de doˈminjo"},
    "capas_dependencias_dominio": {"texto":"La capa de dominio depende de la infraestructura.","fonetica":"la ˈkapa de doˈminjo deˈpende de la infɾaestɾukˈtuɾa"},
    "capas_regla_unidireccional": {"texto":"Las dependencias entre capas son siempre unidireccionales.","fonetica":"las depenˈðjenθjas ˈentɾe ˈkapas son ˈsjempɾe uniðiɾekθjoˈnales"},
    "capas_ventaja_ui": {"texto":"Separar la interfaz en su propia capa facilita su reemplazo.","fonetica":"sepaˈɾaɾ la inteɾˈfas en su ˈpɾopja ˈkapa fasilita su reemplaˈθo"},
    "capas_ventaja_dominio": {"texto":"Centralizar la lógica de negocio en una capa dedicada da coherencia.","fonetica":"θentɾaliˈθaɾ la ˈloxika de neˈɣoθjo en ˈuna ˈkapa ðeðiˈkaða da koeˈɾenθja"},
    "capas_ventaja_datos": {"texto":"Encapsular el acceso a datos en su capa facilita migraciones.","fonetica":"enkapsuˈlaɾ el akˈθeso a ˈðatos en su ˈkapa fasilita migɾaˈθjones"},
    "capas_regla_test": {"texto":"Las pruebas deben concentrarse en cada capa de forma aislada.","fonetica":"las ˈpɾweβas ˈdeβen konsentɾaɾse en ˈkaða ˈkapa de ˈfoɾma aisˈlaða"},
    "capas_mock_repo": {"texto":"Es común usar mocks en la capa de infraestructura para pruebas.","fonetica":"es koˈmun uˈsaɾ moks en la ˈkapa de infɾaestɾukˈtuɾa paɾa ˈpɾweβas"},
    "capas_mock_servicio": {"texto":"Los servicios de aplicación pueden simularse para pruebas unitarias.","fonetica":"los seɾˈβisjos de apliˈkaθjon ˈpweden simulaɾse paɾa ˈpɾweβas uniˈtaɾjas"},
    "capas_dominio_central": {"texto":"La capa de dominio es el corazón de la arquitectura en capas.","fonetica":"la ˈkapa de doˈminjo es el koɾaˈθon de la aɾkitekˈtuɾa en ˈkapas"},
    "capas_ui_cambio": {"texto":"El cambio de tecnologías de interfaz solo afecta la capa de presentación.","fonetica":"el ˈkambjo de teʝnoloˈxias de inteɾˈfas ˈsolo aˈfekta la ˈkapa de pɾesentaˈθjon"},
    "capas_api": {"texto":"Las APIs suelen definirse en la capa de aplicación.","fonetica":"las a.pis ˈswelen ðefiˈniɾse en la ˈkapa de apliˈkaθjon"},
    "capas_mediador": {"texto":"La capa de aplicación actúa como mediador entre usuario y negocio.","fonetica":"la ˈkapa de apliˈkaθjon akˈtwa komo meðjaˈðoɾ ˈentɾe usuˈaɾjo i neˈɣoθjo"},
    "capas_dominio_inmutable": {"texto":"La lógica de dominio debe ser lo más inmutable posible.","fonetica":"la ˈloxika de doˈminjo ˈdeβe seɾ lo mas inmuˈtaβle poˈsiβle"},
    "capas_dominio_valioso": {"texto":"El dominio contiene lo más valioso del sistema: las reglas de negocio.","fonetica":"el doˈminjo konˈtjɛne lo mas βaˈljoso del sisˈtema las ˈreglas de neˈɣoθjo"},
    "capas_infraestructura_variable": {"texto":"La infraestructura suele cambiar más que el dominio.","fonetica":"la infɾaestɾukˈtuɾa ˈswɛ.le kamˈbjaɾ mas ke el doˈminjo"},
    "capas_presentacion_variable": {"texto":"La capa de presentación es la más propensa a cambios.","fonetica":"la ˈkapa de pɾesentaˈθjon es la mas pɾoˈpensa a ˈkambjos"},
    "capas_proteccion_dominio": {"texto":"La capa de dominio debe estar protegida de cambios externos.","fonetica":"la ˈkapa de doˈminjo ˈdeβe esˈtaɾ pɾoteˈxiða de ˈkambjos eksˈteɾnos"}
 ,
    "capas_evolucion1": {"texto":"Un sistema en capas puede evolucionar gradualmente sin romper dependencias.","fonetica":"un sisˈtema en ˈkapas ˈpweðe eβoluˈθjoɾ ɣɾaðualˈmen̪te sin ˈrompeɾ deˈpenðenθjas"},
    "capas_multiproyecto": {"texto":"La organización en capas es útil en soluciones multiproyecto.","fonetica":"la oɾɣaniθaˈθjon en ˈkapas es ˈutil en soluˈθjones multipɾoˈʝekto"},
    "capas_costos": {"texto":"Una buena arquitectura en capas reduce costos de mantenimiento.","fonetica":"una ˈbwena aɾkiteɾukˈtuɾa en ˈkapas reˈðuθe ˈkostos de mantenimiˈen̪to"},
    "capas_pruebas_unitarias": {"texto":"Las capas facilitan la implementación de pruebas unitarias aisladas.","fonetica":"las ˈkapas fasiˈlitan la implemen̪taˈθjon de ˈpɾweβas unitaɾiˈas aislˈaðas"},
    "capas_pruebas_integracion": {"texto":"Las pruebas de integración verifican la colaboración entre capas.","fonetica":"las ˈpɾweβas de inteɣɾaˈθjon βeɾifiˈkan la kolaβoɾaˈθjon ˈentɾe ˈkapas"},
    "capas_ui": {"texto":"La capa de presentación puede cambiar de interfaz sin afectar la lógica.","fonetica":"la ˈkapa de pɾesentaˈθjon ˈpweðe kanˈbjaɾ de inteɾˈfase sin afekˈtaɾ la ˈloxika"},
    "capas_api1": {"texto":"Las APIs suelen ubicarse en la capa de aplicación para exponer funcionalidades.","fonetica":"las aˈpis ˈswelen uβiˈkaɾse en la ˈkapa de aplikθjon ˈpaɾa ekspoˈneɾ funθjonalˈiðaðes"},
    "capas_validacion": {"texto":"La validación de datos pertenece a la capa de aplicación o dominio.","fonetica":"la βaliðaˈθjon de ˈðatos peɾteneˈθe a la ˈkapa de aplikθjon o doˈminjo"},
    "capas_autenticacion": {"texto":"La autenticación normalmente se gestiona en la capa de aplicación.","fonetica":"la auten̪tikaˈθjon noɾmalˈmen̪te se xesˈtjona en la ˈkapa de aplikθjon"},
    "capas_autorizacion": {"texto":"La autorización valida permisos de usuario en la capa de aplicación.","fonetica":"la autoɾiθaˈθjon βaliˈða peɾmiˈsos de usuˈaɾjo en la ˈkapa de aplikθjon"},
    "capas_sesion": {"texto":"El manejo de sesiones suele residir en la capa de infraestructura.","fonetica":"el maˈnexo de seˈsjones ˈswelen reˈsiðiɾ en la ˈkapa de infɾaestɾukˈtuɾa"},
    "capas_cache": {"texto":"El almacenamiento en caché se implementa en la capa de infraestructura.","fonetica":"el almaθenaˈmjento en ˈkatʃe se implemenˈta en la ˈkapa de infɾaestɾukˈtuɾa"},
    "capas_escalabilidad1": {"texto":"La escalabilidad es más sencilla cuando las capas están bien definidas.","fonetica":"la eskalaβiliˈðað es mas senˈsiʝa ˈkwando las ˈkapas esˈtan βjen defiˈniðas"},
    "capas_portabilidad": {"texto":"Una aplicación en capas es más portable entre entornos.","fonetica":"una apliˈkaθjon en ˈkapas es mas poɾˈtaβle ˈentɾe enˈtoɾnos"},
    "capas_testabilidad": {"texto":"El diseño en capas incrementa la testabilidad del sistema.","fonetica":"el diˈseɲo en ˈkapas inkɾemen̪ta la testabiliˈðað del sisˈtema"},
    "capas_seguridad": {"texto":"La seguridad se fortalece con políticas distribuidas entre capas.","fonetica":"la seɣuɾiˈðað se foɾtaleˈθe kon poliˈtikas distɾiˈβwiðas ˈentɾe ˈkapas"},
    "capas_reutilizacion1": {"texto":"La reutilización de código es más fácil en arquitecturas en capas.","fonetica":"la reutiʎiθaˈθjon de ˈkoðiɣo es mas faˈsil en aɾkiteɾukˈtuɾas en ˈkapas"},
    "capas_excepciones": {"texto":"Las excepciones deben manejarse de forma coherente en cada capa.","fonetica":"las eksepθjoˈnes ˈdeβen maneˈxaɾse de ˈfoɾma ko.eˈɾen̪te en ˈkaða ˈkapa"},
    "capas_trazabilidad": {"texto":"La trazabilidad mejora gracias a la clara división en capas.","fonetica":"la tɾaθaβiliˈðað meˈxoɾa ˈɣɾaθjas a la ˈklaɾa diβiˈsjon en ˈkapas"},
    "capas_modernas": {"texto":"Los frameworks modernos siguen usando el concepto de capas.","fonetica":"los ˈfɾemwɾoks moˈðeɾnos ˈsiɣen uˈsando el konˈθepto de ˈkapas"},
    "capas_limite": {"texto":"Cada capa establece límites claros con las demás.","fonetica":"ˈkaða ˈkapa estabˈleθe ˈlimites ˈklaɾos kon las deˈmas"},
    "capas_api_gateway": {"texto":"Un API Gateway puede actuar como interfaz entre usuarios y capas internas.","fonetica":"un api ˈɣatewei ˈpweðe aktuˈaɾ ˈkomo inteɾˈfase ˈentɾe usuˈaɾjos i ˈkapas inˈteɾnas"},
    "capas_mensajeria": {"texto":"La mensajería asincrónica conecta capas de manera desacoplada.","fonetica":"la mensaxeˈɾi.a asinkɾoˈnika koˈnekta ˈkapas de maneˈɾa ðesakopˈlaða"},
    "capas_logs": {"texto":"El registro de logs debe abarcar interacciones entre capas.","fonetica":"el reˈxistɾo de loxs ˈdeβe aβaɾˈkaɾ inteɾakˈθjones ˈentɾe ˈkapas"},
    "capas_ci_cd": {"texto":"Las capas facilitan la integración continua y despliegue continuo.","fonetica":"las ˈkapas fasiˈlitan la inteɣɾaˈθjon konˈtinwa i desˈpljeɣwe konˈtinwo"},
    "capas_legado": {"texto":"Sistemas heredados pueden modernizarse respetando capas existentes.","fonetica":"sisˈtemas eɾeˈðaðos ˈpweðen moðeɾniˈθaɾse respeˈtando ˈkapas eksisˈtentes"},
    "capas_conclusion": {"texto":"La arquitectura en capas es un pilar fundamental para sistemas mantenibles y escalables.","fonetica":"la aɾkiteɾukˈtuɾa en ˈkapas es un piˈlaɾ funðamen̪ˈtal ˈpaɾa sisˈtemas mantenˈiβles i eskalaˈβles"}
  }
        