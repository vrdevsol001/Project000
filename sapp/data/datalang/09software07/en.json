{
    "microservicios_definicion": {"texto":"Microservices architecture divides a system into small, independent services.","fonetica":"ˈmaɪkroʊˌsɜːrvɪsɪz ˈɑːrkɪtɛkʧər dɪˈvaɪdz ə ˈsɪstəm ˈɪntu smɔl ˌɪndɪˈpɛndənt ˈsɜːrvɪsɪz"},
    "microservicios_independencia": {"texto":"Each microservice can be developed, deployed, and scaled independently.","fonetica":"iːʧ ˈmaɪkroʊˌsɜːrvɪs kæn bi dɪˈvɛləpt dɪˈplɔɪd ənd skeɪld ˌɪndɪˈpɛndəntli"},
    "microservicios_comunicacion": {"texto":"Microservices communicate primarily through lightweight APIs.","fonetica":"ˈmaɪkroʊˌsɜːrvɪsɪz kəˈmjuːnɪkeɪt praɪˈmɛrəli θruː ˈlaɪtweɪt ˌeɪpiːˈaɪz"},
    "microservicios_autonomia": {"texto":"The autonomy of each service is a fundamental principle of microservices.","fonetica":"ði ɔːˈtɒnəmi ɒv iːʧ ˈsɜːrvɪs ɪz ə ˌfʌndəˈmɛntl ˈprɪnsəpəl ɒv ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_despliegue": {"texto":"Teams can deploy microservices without affecting others.","fonetica":"tiːmz kæn dɪˈplɔɪ ˈmaɪkroʊˌsɜːrvɪsɪz wɪˈθaʊt əˈfɛktɪŋ ˈʌðərz"},
    "microservicios_tecnologias": {"texto":"Each microservice can use different programming languages or technologies.","fonetica":"iːʧ ˈmaɪkroʊˌsɜːrvɪs kæn juːz ˈdɪfərənt ˈproʊɡræmɪŋ ˈlæŋɡwɪʤɪz ɔr tɛkˈnɒləʤiz"},
    "microservicios_escalabilidad": {"texto":"Microservices architecture facilitates horizontal scalability.","fonetica":"ˈmaɪkroʊˌsɜːrvɪsɪz ˈɑːrkɪtɛkʧər fəˈsɪlɪteɪts ˌhɒrɪˈzɒntl ˌskeɪləˈbɪlɪti"},
    "microservicios_flexibilidad": {"texto":"Microservices provide flexibility in development and maintenance.","fonetica":"ˈmaɪkroʊˌsɜːrvɪsɪz prəˈvaɪd ˌflɛksɪˈbɪlɪti ɪn dɪˈvɛləpmənt ənd ˈmeɪntənəns"},
    "microservicios_resiliencia": {"texto":"Failures in one microservice should not bring down the entire system.","fonetica":"ˈfeɪljərz ɪn wʌn ˈmaɪkroʊˌsɜːrvɪs ʃʊd nɒt brɪŋ daʊn ði ɪnˈtaɪə ˈsɪstəm"},
    "microservicios_orientacion_negocio": {"texto":"Each microservice should align with a specific business capability.","fonetica":"iːʧ ˈmaɪkroʊˌsɜːrvɪs ʃʊd əˈlaɪn wɪð ə spəˈsɪfɪk ˈbɪznəs ˌkeɪpəˈbɪlɪti"},
    "microservicios_modularidad": {"texto":"Modularity allows isolated evolution of system components.","fonetica":"ˌmɒʤʊˈlærɪti əˈlaʊz ˈaɪsəleɪtɪd ˌɛvəˈluːʃən ɒv ˈsɪstəm kəmˈpoʊnənts"},
    "microservicios_desarrollo_paralelo": {"texto":"Different teams can work in parallel on separate microservices.","fonetica":"ˈdɪfərənt tiːmz kæn wɜːrk ɪn ˈpærəˌlɛl ɒn ˈsɛpərɪt ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_pruebas": {"texto":"Unit testing is more manageable with small microservices.","fonetica":"ˈjuːnɪt ˈtɛstɪŋ ɪz mɔːr ˈmænɪʤəbl wɪð smɔl ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_despliegue_continuo": {"texto":"Continuous integration and deployment fit well with microservices.","fonetica":"kənˈtɪnjʊəs ˌɪntɪˈɡreɪʃən ənd dɪˈplɔɪmənt fɪt wɛl wɪð ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_mantenimiento": {"texto":"Microservices simplify long-term maintenance.","fonetica":"ˈmaɪkroʊˌsɜːrvɪsɪz ˈsɪmplɪfaɪ ˈlɔŋtɜːrm ˈmeɪntənəns"},
    "microservicios_deploy_independiente": {"texto":"Each microservice deploys without impacting others.","fonetica":"iːʧ ˈmaɪkroʊˌsɜːrvɪs dɪˈplɔɪz wɪˈθaʊt ˈɪmpæktɪŋ ˈʌðərz"},
    "microservicios_complejidad": {"texto":"Microservices architecture introduces new complexity in communication.","fonetica":"ˈmaɪkroʊˌsɜːrvɪsɪz ˈɑːrkɪtɛkʧər ˌɪntrəˈdjuːsɪz njuː kəmˈplɛksɪti ɪn kəˌmjuːnɪˈkeɪʃən"},
    "microservicios_base_datos": {"texto":"Each microservice can have its own database.","fonetica":"iːʧ ˈmaɪkroʊˌsɜːrvɪs kæn hæv ɪts oʊn ˈdeɪtəbeɪs"},
    "microservicios_autosuficiencia": {"texto":"A microservice should be self-sufficient in logic and data.","fonetica":"ə ˈmaɪkroʊˌsɜːrvɪs ʃʊd bi sɛlf səˈfɪʃənt ɪn ˈlɒʤɪk ənd ˈdeɪtə"},
    "microservicios_beneficios": {"texto":"The main benefits are flexibility, scalability, and resilience.","fonetica":"ðə meɪn ˈbɛnɪfɪts ɑːr ˌflɛksɪˈbɪlɪti ˌskeɪləˈbɪlɪti ənd rɪˈzɪliəns"},
    "microservicios_limitaciones": {"texto":"Limitations include increased complexity and operational overhead.","fonetica":"ˌlɪmɪˈteɪʃənz ɪnˈkluːd ɪnˈkriːst kəmˈplɛksɪti ənd ˌɒpəˈreɪʃənl ˈoʊvərhed"},
    "microservicios_patrones": {"texto":"Common patterns include API Gateway and Service Discovery.","fonetica":"ˈkɒmən ˈpætərnz ɪnˈkluːd ˌeɪpiːˈaɪ ˈɡeɪtweɪ ənd ˈsɜːrvɪs dɪˈskʌvəri"},
    "microservicios_api_gateway": {"texto":"The API Gateway centralizes requests and routes to microservices.","fonetica":"ði ˌeɪpiːˈaɪ ˈɡeɪtweɪ ˈsɛntrəlaɪzɪz rɪˈkwɛsts ənd ruːts tu ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_discovery": {"texto":"Service discovery facilitates dynamic location of services.","fonetica":"ˈsɜːrvɪs dɪˈskʌvəri fəˈsɪlɪteɪts daɪˈnæmɪk loʊˈkeɪʃən ɒv ˈsɜːrvɪsɪz"},
    "microservicios_comunicacion_sincronica": {"texto":"Microservices can communicate synchronously.","fonetica":"ˈmaɪkroʊˌsɜːrvɪsɪz kæn kəˈmjuːnɪkeɪt ˈsɪŋkrənəsli"},
    "microservicios_comunicacion_asincronica": {"texto":"Asynchronous communication is achieved through queues and events.","fonetica":"eɪˈsɪŋkrənəs kəˌmjuːnɪˈkeɪʃən ɪz əˈʧiːvd θruː kjuːz ənd ɪˈvɛnts"},
    "microservicios_mensajeria": {"texto":"Messaging systems support asynchronous integration.","fonetica":"ˈmɛsɪʤɪŋ ˈsɪstəmz səˈpɔːrt eɪˈsɪŋkrənəs ˌɪntɪˈɡreɪʃən"},
    "microservicios_observabilidad": {"texto":"Observability includes monitoring, logging, and tracing.","fonetica":"əbˌzɜːrvəˈbɪlɪti ɪnˈkluːdz ˈmɒnɪtərɪŋ ˈlɒɡɪŋ ənd ˈtreɪsɪŋ"},
    "microservicios_orquestacion": {"texto":"Orchestration coordinates the execution of multiple microservices.","fonetica":"ˌɔːrkɪsˈtreɪʃən koʊˈɔːrdɪneɪts ði ˌɛksɪˈkjuːʃən ɒv ˈmʌltɪpl ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_contenedores": {"texto":"Microservices typically run in containers like Docker.","fonetica":"ˈmaɪkroʊˌsɜːrvɪsɪz ˈtɪpɪkli rʌn ɪn kənˈteɪnərz laɪk ˈdɒkər"},
    "microservicios_kubernetes": {"texto":"Kubernetes is used to orchestrate containers and microservices.","fonetica":"kuːbərˈnɛtɪz ɪz juːst tu ˈɔːrkɪstreɪt kənˈteɪnərz ənd ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_escalado_horizontal": {"texto":"Microservices enable horizontal scaling based on demand.","fonetica":"ˈmaɪkroʊˌsɜːrvɪsɪz ɪnˈeɪbl ˌhɒrɪˈzɒntl ˈskeɪlɪŋ beɪst ɒn dɪˈmænd"},
    "microservicios_escalado_vertical": {"texto":"Vertical scaling is not always efficient with microservices.","fonetica":"ˈvɜːrtɪkl ˈskeɪlɪŋ ɪz nɒt ˈɔːlweɪz ɪˈfɪʃənt wɪð ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_tolerancia_fallos": {"texto":"Fault tolerance is essential in microservices systems.","fonetica":"fɔːlt ˈtɒlərəns ɪz ɪˈsɛnʃl ɪn ˈmaɪkroʊˌsɜːrvɪsɪz ˈsɪstəmz"},
    "microservicios_circuit_breaker": {"texto":"The Circuit Breaker pattern prevents cascading failures.","fonetica":"ðə ˈsɜːrkɪt ˈbreɪkər ˈpætərn prɪˈvɛnts ˈkæskeɪdɪŋ ˈfeɪljərz"},
    "microservicios_reintentos": {"texto":"The retry mechanism improves call resilience.","fonetica":"ðə ˈriːtraɪ ˈmɛkənɪzəm ɪmˈpruːvz kɔːl rɪˈzɪliəns"},
    "microservicios_timeout": {"texto":"Configuring timeouts protects the system from hangs.","fonetica":"kənˈfɪɡjəreɪtɪŋ ˈtaɪmaʊts prəˈtɛkts ðə ˈsɪstəm frɒm hæŋz"},
    "microservicios_balanceo": {"texto":"Load balancing distributes traffic among microservices.","fonetica":"loʊd ˈbælənsɪŋ ˈdɪstrɪbjuːts ˈtræfɪk əˈmʌŋ ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_autoscaling": {"texto":"Autoscaling automatically adjusts capacity.","fonetica":"ˈɔːtoʊskeɪlɪŋ ˌɔːtəˈmætɪkli əˈʤʌsts kəˈpæsɪti"},
    "microservicios_seguridad": {"texto":"Security is strengthened with authentication and authorization.","fonetica":"sɪˈkjʊərɪti ɪz ˈstrɛŋθənd wɪð ɔːˌθɛntɪˈkeɪʃən ənd ˌɔːθəraɪˈzeɪʃən"},
    "microservicios_oauth2": {"texto":"OAuth2 is a common standard for microservices authentication.","fonetica":"oʊˈɔːθ tuː ɪz ə ˈkɒmən ˈstændərd fɔːr ˈmaɪkroʊˌsɜːrvɪsɪz ɔːˌθɛntɪˈkeɪʃən"},
    "microservicios_jwt": {"texto":"JWT tokens are used for communication security.","fonetica":"ʤeɪˌdʌbəljuːˈtiː ˈtoʊkənz ɑːr juːzd fɔːr kəˌmjuːnɪˈkeɪʃən sɪˈkjʊərɪti"},
    "microservicios_monitorizacion": {"texto":"Monitoring enables real-time problem detection.","fonetica":"ˈmɒnɪtərɪŋ ɪnˈeɪblz ˈriːəltaɪm ˈprɒbləm dɪˈtɛkʃən"},
    "microservicios_logging": {"texto":"Centralized logging aids error analysis.","fonetica":"ˈsɛntrəlaɪzd ˈlɒɡɪŋ eɪdz ˈɛrər əˈnælɪsɪs"},
    "microservicios_tracing": {"texto":"Distributed tracing provides call flow information between services.","fonetica":"dɪˈstrɪbjʊtɪd ˈtreɪsɪŋ prəˈvaɪdz kɔːl floʊ ˌɪnfərˈmeɪʃən bɪˈtwiːn ˈsɜːrvɪsɪz"},
    "microservicios_metricas": {"texto":"Metrics allow system performance evaluation.","fonetica":"ˈmɛtrɪks əˈlaʊ ˈsɪstəm pərˈfɔːrməns ɪˌvæljʊˈeɪʃən"},
    "microservicios_devops": {"texto":"DevOps culture facilitates continuous delivery in microservices.","fonetica":"ˈdɛvɒps ˈkʌlʧər fəˈsɪlɪteɪts kənˈtɪnjʊəs dɪˈlɪvəri ɪn ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_ci_cd": {"texto":"Continuous integration and delivery are key in microservices.","fonetica":"kənˈtɪnjʊəs ˌɪntɪˈɡreɪʃən ənd dɪˈlɪvəri ɑːr kiː ɪn ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_testing_contract": {"texto":"Contract testing verifies service compatibility.","fonetica":"ˈkɒntrækt ˈtɛstɪŋ ˈvɛrɪfaɪz ˈsɜːrvɪs kəmˌpætəˈbɪlɪti"},
    "microservicios_canary_release": {"texto":"Canary deployment reduces risks when releasing new versions.","fonetica":"kəˈnɛəri dɪˈplɔɪmənt rɪˈduːsɪz rɪsks wɛn rɪˈliːsɪŋ njuː ˈvɜːrʒənz"},
    "microservicios_blue_green": {"texto":"Blue-Green Deployment enables changes without downtime.","fonetica":"bluː ɡriːn dɪˈplɔɪmənt ɪnˈeɪblz ˈʧeɪnʤɪz wɪˈθaʊt ˈdaʊntaɪm"},
    "microservicios_rollback": {"texto":"Rollback allows reverting to a stable version if failures occur.","fonetica":"ˈroʊlbæk əˈlaʊz rɪˈvɜːrtɪŋ tu ə ˈsteɪbl ˈvɜːrʒən ɪf ˈfeɪljərz əˈkɜːr"},
    "microservicios_pipeline": {"texto":"Pipelines automate building, testing, and deployment.","fonetica":"ˈpaɪplaɪnz ˈɔːtəmeɪt ˈbɪldɪŋ ˈtɛstɪŋ ənd dɪˈplɔɪmənt"},
    "microservicios_observabilidad_full": {"texto":"Full observability integrates logs, metrics, and traces.","fonetica":"fʊl əbˌzɜːrvəˈbɪlɪti ˈɪntɪɡreɪts lɒɡz ˈmɛtrɪks ənd treɪsɪz"},
    "microservicios_configuracion": {"texto":"Centralized configuration helps manage parameters.","fonetica":"ˈsɛntrəlaɪzd kənˌfɪɡjəˈreɪʃən hɛlps ˈmænɪʤ pəˈræmɪtərz"},
    "microservicios_secretos": {"texto":"Secret management is critical for security.","fonetica":"ˈsiːkrɪt ˈmænɪʤmənt ɪz ˈkrɪtɪkəl fɔːr sɪˈkjʊərɪti"},
    "microservicios_config_server": {"texto":"A configuration server distributes settings to services.","fonetica":"ə kənˌfɪɡjəˈreɪʃən ˈsɜːrvər ˈdɪstrɪbjuːts ˈsɛtɪŋz tu ˈsɜːrvɪsɪz"},
    "microservicios_event_driven": {"texto":"Microservices often communicate through events.","fonetica":"ˈmaɪkroʊˌsɜːrvɪsɪz ˈɔːfən kəˈmjuːnɪkeɪt θruː ɪˈvɛnts"},
    "microservicios_colas_mensajes": {"texto":"Message queues decouple producers and consumers.","fonetica":"ˈmɛsɪʤ kjuːz diːˈkʌpl prəˈduːsərz ənd kənˈsuːmərz"},
    "microservicios_kafka": {"texto":"Apache Kafka is frequently used as a messaging system.","fonetica":"əˈpætʃi ˈkɑːfkə ɪz ˈfriːkwəntli juːzd æz ə ˈmɛsɪʤɪŋ ˈsɪstəm"},
    "microservicios_rabbitmq": {"texto":"RabbitMQ is another popular option for asynchronous communication.","fonetica":"ˈræbɪt em kjuː ɪz əˈnʌðər ˈpɒpjələr ˈɒpʃən fɔːr eɪˈsɪŋkrənəs kəˌmjuːnɪˈkeɪʃən"},
    "microservicios_streaming": {"texto":"Data streaming connects producers and subscribers in real time.","fonetica":"ˈdeɪtə ˈstriːmɪŋ kəˈnɛkts prəˈduːsərz ənd səbˈskraɪbərz ɪn ˈriːəl taɪm"},
    "microservicios_asincronia": {"texto":"Asynchrony allows processing tasks without blocking the system.","fonetica":"eɪˈsɪŋkrəni əˈlaʊz ˈprəʊsɛsɪŋ tæsks wɪˈθaʊt ˈblɒkɪŋ ðə ˈsɪstəm"},
    "microservicios_saga": {"texto":"The Saga pattern coordinates distributed transactions.","fonetica":"ðə ˈsɑːɡə ˈpætərn koʊˈɔːrdɪneɪts dɪˈstrɪbjʊtɪd trænˈzækʃənz"},
    "microservicios_choreography": {"texto":"Choreography distributes coordination logic across services.","fonetica":"ˌkɒriˈɒɡrəfi ˈdɪstrɪbjuːts koʊˌɔːrdɪˈneɪʃən ˈlɒʤɪk əˈkrɒs ˈsɜːrvɪsɪz"},
    "microservicios_orchestration": {"texto":"Orchestration centralizes control of workflow processes.","fonetica":"ˌɔːrkɪsˈtreɪʃən ˈsɛntrəlaɪzɪz ˈkɒntroʊl ɒv ˈwɜːrkfloʊ ˈprəʊsɛsɪz"},
    "microservicios_idempotencia": {"texto":"Idempotent operations prevent duplicate effects.","fonetica":"aɪˈdɛmpətənt ˌɒpəˈreɪʃənz prɪˈvɛnt ˈdjuːplɪkɪt ɪˈfɛkts"},
    "microservicios_consistencia_eventual": {"texto":"Eventual consistency is common in distributed systems.","fonetica":"ɪˈvɛnʧuəl kənˈsɪstənsi ɪz ˈkɒmən ɪn dɪˈstrɪbjʊtɪd ˈsɪstəmz"},
    "microservicios_event_sourcing": {"texto":"Event Sourcing stores event history as the source of truth.","fonetica":"ɪˈvɛnt ˈsɔːrsɪŋ stɔːrz ɪˈvɛnt ˈhɪstəri æz ðə sɔːrs ɒv truːθ"},
    "microservicios_cqrs": {"texto":"CQRS separates read and write operations.","fonetica":"siː kjuː ɑːr ˈɛs ˈsɛpəreɪts riːd ənd raɪt ˌɒpəˈreɪʃənz"},
    "microservicios_datos_particionados": {"texto":"Data can be partitioned to improve performance.","fonetica":"ˈdeɪtə kæn bi pɑːrˈtɪʃənd tu ɪmˈpruːv pərˈfɔːrməns"},
    "microservicios_sharding": {"texto":"Sharding distributes data across different nodes.","fonetica":"ˈʃɑːrdɪŋ ˈdɪstrɪbjuːts ˈdeɪtə əˈkrɒs ˈdɪfərənt noʊdz"},
    "microservicios_replica_datos": {"texto":"Data replicas ensure availability.","fonetica":"ˈdeɪtə ˈrɛplɪkəz ɪnˈʃʊər əˌveɪləˈbɪlɪti"},
    "microservicios_cache": {"texto":"Using cache reduces database load.","fonetica":"ˈjuːzɪŋ kæʃ rɪˈduːsɪz ˈdeɪtəbeɪs loʊd"},
    "microservicios_api_gateway1": {"texto":"The API Gateway centralizes requests to microservices.","fonetica":"ði ˌeɪpiːˈaɪ ˈɡeɪtweɪ ˈsɛntrəlaɪzɪz rɪˈkwɛsts tu ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_graphql": {"texto":"GraphQL enables flexible queries to multiple services.","fonetica":"ˈɡræf kjuː ˈɛl ɪnˈeɪblz ˈflɛksəbl ˈkwɪəriz tu ˈmʌltɪpl ˈsɜːrvɪsɪz"},
    "microservicios_rest": {"texto":"REST remains a common communication style for microservices.","fonetica":"rɛst rɪˈmeɪnz ə ˈkɒmən kəˌmjuːnɪˈkeɪʃən staɪl fɔːr ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_grpc": {"texto":"gRPC provides efficient and fast communication between services.","fonetica":"ʤiː ɑːr piː siː prəˈvaɪdz ɪˈfɪʃənt ənd fæst kəˌmjuːnɪˈkeɪʃən bɪˈtwiːn ˈsɜːrvɪsɪz"},
    "microservicios_event_bus": {"texto":"The event bus facilitates service integration.","fonetica":"ði ɪˈvɛnt bʌs fəˈsɪlɪteɪts ˈsɜːrvɪs ˌɪntɪˈɡreɪʃən"},
    "microservicios_resiliencia1": {"texto":"Resilience means recovering quickly from failures.","fonetica":"rɪˈzɪliəns miːnz rɪˈkʌvərɪŋ ˈkwɪkli frɒm ˈfeɪljərz"},
    "microservicios_high_availability": {"texto":"High availability ensures the system is always accessible.","fonetica":"haɪ əˌveɪləˈbɪlɪti ɪnˈʃʊərz ðə ˈsɪstəm ɪz ˈɔːlweɪz əkˈsɛsəbl"},
    "microservicios_latency": {"texto":"Reducing latency improves user experience.","fonetica":"rɪˈduːsɪŋ ˈleɪtənsi ɪmˈpruːvz ˈjuːzər ɪkˈspɪəriəns"},
    "microservicios_rate_limit": {"texto":"Rate limiting controls the number of allowed requests.","fonetica":"reɪt ˈlɪmɪtɪŋ ˈkɒntroʊlz ðə ˈnʌmbər ɒv əˈlaʊd rɪˈkwɛsts"},
    "microservicios_backpressure": {"texto":"Backpressure regulates message flow to prevent overload.","fonetica":"ˈbækprɛʃər ˈrɛɡjəleɪts ˈmɛsɪʤ floʊ tu prɪˈvɛnt ˈoʊvərloʊd"},
    "microservicios_throttling": {"texto":"Throttling limits excessive service usage.","fonetica":"ˈθrɒtlɪŋ ˈlɪmɪts ɪkˈsɛsɪv ˈsɜːrvɪs ˈjuːsɪʤ"},
    "microservicios_multicloud": {"texto":"Microservices can be deployed in multi-cloud environments.","fonetica":"ˈmaɪkroʊˌsɜːrvɪsɪz kæn bi dɪˈplɔɪd ɪn ˈmʌlti klaʊd ɪnˈvaɪrənmənts"},
    "microservicios_hibrido": {"texto":"Hybrid deployments combine public and private clouds.","fonetica":"ˈhaɪbrɪd dɪˈplɔɪmənts kəmˈbaɪn ˈpʌblɪk ənd ˈpraɪvət klaʊdz"},
    "microservicios_sagas": {"texto":"The Saga pattern manages distributed transactions in microservices.","fonetica":"ðə ˈsɑːɡə ˈpætərn ˈmænɪʤɪz dɪˈstrɪbjʊtɪd trænˈzækʃənz ɪn ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_choreography1": {"texto":"Choreography in microservices avoids a central orchestrator.","fonetica":"ˌkɒriˈɒɡrəfi ɪn ˈmaɪkroʊˌsɜːrvɪsɪz əˈvɔɪdz ə ˈsɛntrəl ˈɔːrkɪstreɪtər"},
    "microservicios_orchestration_vs_choreography": {"texto":"Centralized orchestration and distributed choreography are different approaches.","fonetica":"ˈsɛntrəlaɪzd ˌɔːrkɪsˈtreɪʃən ənd dɪˈstrɪbjʊtɪd ˌkɒriˈɒɡrəfi ɑːr ˈdɪfərənt əˈproʊʧɪz"},
    "microservicios_transacciones_distribuidas": {"texto":"Distributed transactions require special mechanisms.","fonetica":"dɪˈstrɪbjʊtɪd trænˈzækʃənz rɪˈkwaɪər ˈspɛʃəl ˈmɛkənɪzəmz"},
    "microservicios_idempotencia1": {"texto":"Idempotency ensures that repeated operations have the same effect.","fonetica":"aɪˈdɛmpətənsi ɪnˈʃʊərz ðæt rɪˈpiːtɪd ˌɒpəˈreɪʃənz hæv ðə seɪm ɪˈfɛkt"},
    "microservicios_consistencia_eventual1": {"texto":"Eventual consistency is common in distributed systems.","fonetica":"ɪˈvɛnʧuəl kənˈsɪstənsi ɪz ˈkɒmən ɪn dɪˈstrɪbjʊtɪd ˈsɪstəmz"},
    "microservicios_consistencia_fuerte": {"texto":"Some systems require strong consistency between services.","fonetica":"sʌm ˈsɪstəmz rɪˈkwaɪər strɒŋ kənˈsɪstənsi bɪˈtwiːn ˈsɜːrvɪsɪz"},
    "microservicios_acid": {"texto":"Microservices often relax traditional ACID properties.","fonetica":"ˈmaɪkroʊˌsɜːrvɪsɪz ˈɔːfən rɪˈlæks trəˈdɪʃənl ˈæsɪd ˈprɒpərtiz"},
    "microservicios_base": {"texto":"The BASE principle balances availability and eventual consistency.","fonetica":"ðə beɪs ˈprɪnsəpəl ˈbælənsɪz əˌveɪləˈbɪlɪti ənd ɪˈvɛnʧuəl kənˈsɪstənsi"},
    "microservicios_cache1": {"texto":"Using caches reduces latency in microservices.","fonetica":"ˈjuːzɪŋ ˈkæʃɪz rɪˈduːsɪz ˈleɪtənsi ɪn ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_api_versionado": {"texto":"API versioning allows evolution without breaking clients.","fonetica":"ˌeɪpiːˈaɪ ˈvɜːrʒənɪŋ əˈlaʊz ˌɛvəˈluːʃən wɪˈθaʊt ˈbreɪkɪŋ ˈklaɪənts"},
    "microservicios_backward_compatibility": {"texto":"Backward compatibility facilitates smooth migrations.","fonetica":"ˈbækwərd kəmˌpætəˈbɪlɪti fəˈsɪlɪteɪts smuːð maɪˈɡreɪʃənz"},
    "microservicios_documentacion_api": {"texto":"Clear API documentation improves integration.","fonetica":"klɪər ˌeɪpiːˈaɪ ˌdɒkjʊmənˈteɪʃən ɪmˈpruːvz ˌɪntɪˈɡreɪʃən"},
    "microservicios_openapi": {"texto":"OpenAPI is a popular standard for describing services.","fonetica":"ˈoʊpən ˌeɪpiːˈaɪ ɪz ə ˈpɒpjələr ˈstændərd fɔːr dɪsˈkraɪbɪŋ ˈsɜːrvɪsɪz"},
    "microservicios_postman": {"texto":"Postman helps test and document microservices.","fonetica":"ˈpoʊstmən hɛlps tɛst ənd ˈdɒkjʊmənt ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_testing_end_to_end": {"texto":"End-to-end testing validates complete flows in microservices.","fonetica":"ɛnd tu ɛnd ˈtɛstɪŋ ˈvælɪdeɪts kəmˈpliːt floʊz ɪn ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_test_datos_mock": {"texto":"Using mock data facilitates isolated testing.","fonetica":"ˈjuːzɪŋ mɒk ˈdeɪtə fəˈsɪlɪteɪts ˈaɪsəleɪtɪd ˈtɛstɪŋ"},
    "microservicios_test_integration": {"texto":"Integration testing verifies communication between services.","fonetica":"ˌɪntɪˈɡreɪʃən ˈtɛstɪŋ ˈvɛrɪfaɪz kəˌmjuːnɪˈkeɪʃən bɪˈtwiːn ˈsɜːrvɪsɪz"},
    "microservicios_test_performance": {"texto":"Performance testing ensures system efficiency.","fonetica":"pərˈfɔːrməns ˈtɛstɪŋ ɪnˈʃʊərz ˈsɪstəm ɪˈfɪʃənsi"},
    "microservicios_test_resiliencia": {"texto":"Resilience testing simulates failures and recovery.","fonetica":"rɪˈzɪliəns ˈtɛstɪŋ ˈsɪmjəleɪts ˈfeɪljərz ənd rɪˈkʌvəri"},
    "microservicios_observabilidad_alertas": {"texto":"Alerts notify about anomalies detected in microservices.","fonetica":"əˈlɜːrts ˈnoʊtɪfaɪ əˈbaʊt əˈnɒməliz dɪˈtɛktɪd ɪn ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_dashboard": {"texto":"Dashboards display key metrics in real time.","fonetica":"ˈdæʃbɔːrdz dɪsˈpleɪ kiː ˈmɛtrɪks ɪn ˈriːəl taɪm"},
    "microservicios_gestion_incidentes": {"texto":"Incident management is vital in microservices operations.","fonetica":"ˈɪnsɪdənt ˈmænɪʤmənt ɪz ˈvaɪtl ɪn ˈmaɪkroʊˌsɜːrvɪsɪz ˌɒpəˈreɪʃənz"},
    "microservicios_costos": {"texto":"Microservices architecture can increase operational costs.","fonetica":"ˈmaɪkroʊˌsɜːrvɪsɪz ˈɑːrkɪtɛkʧər kæn ɪnˈkriːs ˌɒpəˈreɪʃənl kɒsts"},
    "microservicios_complejidad_gestion": {"texto":"Managing many microservices increases complexity.","fonetica":"ˈmænɪʤɪŋ ˈmɛni ˈmaɪkroʊˌsɜːrvɪsɪz ɪnˈkriːsɪz kəmˈplɛksɪti"},
    "microservicios_equipo_multidisciplinario": {"texto":"Multidisciplinary teams favor success with microservices.","fonetica":"ˌmʌltɪˈdɪsɪplɪnəri tiːmz ˈfeɪvər səkˈsɛs wɪð ˈmaɪkroʊˌsɜːrvɪsɪz"},
    "microservicios_cultura_colaboracion": {"texto":"Team collaboration is key for microservices success.","fonetica":"tiːm kəˌlæbəˈreɪʃən ɪz kiː fɔːr ˈmaɪkroʊˌsɜːrvɪsɪz səkˈsɛs"},
    "microservicios_automatizacion": {"texto":"Automation reduces human errors in deployments.","fonetica":"ˌɔːtəmeɪˈzeɪʃən rɪˈduːsɪz ˈhjuːmən ˈɛrərz ɪn dɪˈplɔɪmənts"},
    "microservicios_infraestructura_como_codigo": {"texto":"Infrastructure as code speeds up resource management.","fonetica":"ˈɪnfrəˌstrʌkʧər æz koʊd spiːdz ʌp ˈriːsɔːrs ˈmænɪʤmənt"}
  }