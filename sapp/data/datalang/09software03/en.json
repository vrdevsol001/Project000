{
    "clean_intro_1": {"texto":"Clean Architecture aims for framework independence","fonetica":"klin ˈɑɹkɪtɛkʧɚ eɪmz fɔɹ ˈfɹeɪmwɝk ˌɪndɪˈpɛndəns"},
    "clean_intro_2": {"texto":"The goal is to keep software flexible and maintainable","fonetica":"ðə ɡoʊl ɪz tə kip ˈsɔftwɛɹ ˈflɛksəbəl ænd meɪnˈteɪnəbəl"},
    "clean_intro_3": {"texto":"It separates responsibilities into well-defined layers","fonetica":"ɪt ˈsɛpəɹeɪts ɹɪˌspɑnsəˈbɪlɪtiz ˈɪntu wɛl dɪˈfaɪnd ˈleɪɚz"},
    "clean_intro_4": {"texto":"Business rules are the core of the system","fonetica":"ˈbɪznəs ɹulz ɑɹ ðə kɔɹ əv ðə ˈsɪstəm"},
    "clean_intro_5": {"texto":"The architecture should be independent of the database","fonetica":"ði ˈɑɹkɪtɛkʧɚ ʃʊd bi ˌɪndɪˈpɛndənt əv ðə ˈdeɪtəˌbeɪs"},
    "clean_intro_6": {"texto":"The user interface should not affect business rules","fonetica":"ðə ˈjuzɚ ˈɪntɚfeɪs ʃʊd nɑt əˈfɛkt ˈbɪznəs ɹulz"},
    "clean_intro_7": {"texto":"The code should be testable and easy to verify","fonetica":"ðə koʊd ʃʊd bi ˈtɛstəbəl ænd ˈizi tə ˈvɛɹɪfaɪ"},
    "clean_intro_8": {"texto":"The architecture should withstand technological changes","fonetica":"ði ˈɑɹkɪtɛkʧɚ ʃʊd wɪθˈstænd ˌtɛknəˈlɑʤɪkəl ˈʧeɪnʤɪz"},
    "clean_intro_9": {"texto":"Clean Architecture proposes concentric layers","fonetica":"klin ˈɑɹkɪtɛkʧɚ pɹəˈpoʊzɪz kənˈsɛntɹɪk ˈleɪɚz"},
    "clean_intro_10": {"texto":"The domain is at the center of the architecture","fonetica":"ðə doʊˈmeɪn ɪz æt ðə ˈsɛntɚ əv ði ˈɑɹkɪtɛkʧɚ"},
    "clean_intro_11": {"texto":"Dependencies always point inward","fonetica":"dɪˈpɛndənsiz ˈɔlweɪz pɔɪnt ˈɪnwɚd"},
    "clean_intro_12": {"texto":"External code depends on internal code, never the reverse","fonetica":"ɪkˈstɝnəl koʊd dɪˈpɛndz ɑn ɪnˈtɝnəl koʊd ˈnɛvɚ ðə ɹɪˈvɝs"},
    "clean_intro_13": {"texto":"Entities represent the most stable business rules","fonetica":"ˈɛntɪtiz ˌɹɛprɪˈzɛnt ðə moʊst ˈsteɪbəl ˈbɪznəs ɹulz"},
    "clean_intro_14": {"texto":"Use cases coordinate system operations","fonetica":"juz ˈkeɪsɪz koʊˈɔɹdɪneɪt ˈsɪstəm ˌɑpəˈɹeɪʃənz"},
    "clean_intro_15": {"texto":"The application layer orchestrates business logic","fonetica":"ði ˌæplɪˈkeɪʃən ˈleɪɚɹ ˈɔɹkɪstɹeɪts ˈbɪznəs ˈlɑʤɪk"},
    "clean_intro_16": {"texto":"Infrastructure implements technical details","fonetica":"ˈɪnfɹəˌstɹʌkʧɚ ˈɪmplɪmɛnts ˈtɛknɪkəl ˈditeɪlz"},
    "clean_intro_17": {"texto":"Frameworks are tools, not the core","fonetica":"ˈfɹeɪmwɝks ɑɹ tulz nɑt ðə kɔɹ"},
    "clean_intro_18": {"texto":"Clean Architecture promotes dependency inversion","fonetica":"klin ˈɑɹkɪtɛkʧɚ pɹəˈmoʊts dɪˈpɛndənsi ɪnˈvɝʒən"},
    "clean_intro_19": {"texto":"Details should depend on abstractions","fonetica":"ˈditeɪlz ʃʊd dɪˈpɛnd ɑn æbˈstɹækʃənz"},
    "clean_intro_20": {"texto":"The golden rule is domain independence","fonetica":"ðə ˈɡoʊldən ɹul ɪz doʊˈmeɪn ˌɪndɪˈpɛndəns"},
    "clean_intro_21": {"texto":"Unit testing is easier with Clean Architecture","fonetica":"ˈjunɪt ˈtɛstɪŋ ɪz ˈiziɚ wɪð klin ˈɑɹkɪtɛkʧɚ"},
    "clean_intro_22": {"texto":"UI changes should not affect the domain","fonetica":"ˈju ˈaɪ ˈʧeɪnʤɪz ʃʊd nɑt əˈfɛkt ðə doʊˈmeɪn"},
    "clean_intro_23": {"texto":"Database changes don't affect the core logic","fonetica":"ˈdeɪtəˌbeɪs ˈʧeɪnʤɪz doʊnt əˈfɛkt ðə kɔɹ ˈlɑʤɪk"},
    "clean_intro_24": {"texto":"The architecture facilitates technology migrations","fonetica":"ði ˈɑɹkɪtɛkʧɚ fəˈsɪləteɪts tɛkˈnɑləʤi maɪˈɡɹeɪʃənz"},
    "clean_intro_25": {"texto":"Clean Architecture enables system scaling","fonetica":"klin ˈɑɹkɪtɛkʧɚ ɪnˈeɪbəlz ˈsɪstəm ˈskeɪlɪŋ"},
    "clean_intro_26": {"texto":"The design decouples infrastructure layers","fonetica":"ðə dɪˈzaɪn diˈkʌpəlz ˈɪnfɹəˌstɹʌkʧɚ ˈleɪɚz"},
    "clean_intro_27": {"texto":"Independence reduces maintenance costs","fonetica":"ˌɪndɪˈpɛndəns ɹɪˈdusɪz ˈmeɪntənəns kɔsts"},
    "clean_intro_28": {"texto":"The architecture supports software evolution","fonetica":"ði ˈɑɹkɪtɛkʧɚ səˈpɔɹts ˈsɔftwɛɹ ˌɛvəˈluʃən"},
    "clean_intro_29": {"texto":"The domain doesn't know technical details","fonetica":"ðə doʊˈmeɪn ˈdʌzənt noʊ ˈtɛknɪkəl ˈditeɪlz"},
    "clean_intro_30": {"texto":"The system is more robust with clear rules","fonetica":"ðə ˈsɪstəm ɪz mɔɹ ɹoʊˈbʌst wɪð klɪɹ ɹulz"},
    "clean_layers_31": {"texto":"The layers form a dependency hierarchy","fonetica":"ðə ˈleɪɚz fɔɹm ə dɪˈpɛndənsi ˈhaɪɹɑɹki"},
    "clean_layers_32": {"texto":"The domain is immune to external changes","fonetica":"ðə doʊˈmeɪn ɪz ɪˈmjun tə ɪkˈstɝnəl ˈʧeɪnʤɪz"},
    "clean_layers_33": {"texto":"Use cases coordinate business workflows","fonetica":"juz ˈkeɪsɪz koʊˈɔɹdɪneɪt ˈbɪznəs ˈwɝkfloʊz"},
    "clean_layers_34": {"texto":"The application layer interacts with infrastructure","fonetica":"ði ˌæplɪˈkeɪʃən ˈleɪɚɹ ˌɪntɚˈækts wɪð ˈɪnfɹəˌstɹʌkʧɚ"},
    "clean_layers_35": {"texto":"Interfaces define clear contracts","fonetica":"ˈɪntɚfeɪsɪz dɪˈfaɪn klɪɹ ˈkɑntɹækts"},
    "clean_layers_36": {"texto":"Decoupling improves maintainability","fonetica":"diˈkʌplɪŋ ɪmˈpɹuvz ˌmeɪntənəˈbɪlɪti"},
    "clean_layers_37": {"texto":"Use cases can be tested without frameworks","fonetica":"juz ˈkeɪsɪz kæn bi ˈtɛstɪd wɪˈθaʊt ˈfɹeɪmwɝks"},
    "clean_layers_38": {"texto":"Infrastructure can be replaced without touching the domain","fonetica":"ˈɪnfɹəˌstɹʌkʧɚ kæn bi ɹiˈpleɪst wɪˈθaʊt ˈtʌʧɪŋ ðə doʊˈmeɪn"},
    "clean_layers_39": {"texto":"The system is built from the inside out","fonetica":"ðə ˈsɪstəm ɪz bɪlt fɹəm ði ˈɪnˌsaɪd aʊt"},
    "clean_layers_40": {"texto":"Business logic doesn't depend on technical details","fonetica":"ˈbɪznəs ˈlɑʤɪk ˈdʌzənt dɪˈpɛnd ɑn ˈtɛknɪkəl ˈditeɪlz"},
    "clean_layers_41": {"texto":"Use cases express expected behavior","fonetica":"juz ˈkeɪsɪz ɪkˈspɹɛs ɪkˈspɛktɪd bɪˈheɪvjɚ"},
    "clean_layers_42": {"texto":"Infrastructure implements adapters","fonetica":"ˈɪnfɹəˌstɹʌkʧɚ ˈɪmplɪmɛnts əˈdæptɚz"},
    "clean_layers_43": {"texto":"Business rules don't change with the UI","fonetica":"ˈbɪznəs ɹulz doʊnt ˈʧeɪnʤ wɪð ði ˈju ˈaɪ"},
    "clean_layers_44": {"texto":"The architecture facilitates integration testing","fonetica":"ði ˈɑɹkɪtɛkʧɚ fəˈsɪləteɪts ˌɪntɪˈɡɹeɪʃən ˈtɛstɪŋ"},
    "clean_layers_45": {"texto":"The system withstands database changes","fonetica":"ðə ˈsɪstəm wɪθˈstændz ˈdeɪtəˌbeɪs ˈʧeɪnʤɪz"},
    "clean_layers_46": {"texto":"Clean Architecture follows the dependency inversion principle","fonetica":"klin ˈɑɹkɪtɛkʧɚ ˈfɑloʊz ðə dɪˈpɛndənsi ɪnˈvɝʒən ˈpɹɪnsəpəl"},
    "clean_layers_47": {"texto":"Concrete details depend on abstract interfaces","fonetica":"ˈkɑnkɹit ˈditeɪlz dɪˈpɛnd ɑn ˈæbstɹækt ˈɪntɚfeɪsɪz"},
    "clean_layers_48": {"texto":"Frameworks are optional and replaceable","fonetica":"ˈfɹeɪmwɝks ɑɹ ˈɑpʃənəl ænd ɹiˈpleɪsəbəl"},
    "clean_layers_49": {"texto":"Infrastructure connects with the outside world","fonetica":"ˈɪnfɹəˌstɹʌkʧɚ kəˈnɛkts wɪð ði ˈaʊtˌsaɪd wɝld"},
    "clean_layers_50": {"texto":"Dependency inversion protects the core","fonetica":"dɪˈpɛndənsi ɪnˈvɝʒən pɹəˈtɛkts ðə kɔɹ"},
    "clean_layers_51": {"texto":"The domain never depends on changing details","fonetica":"ðə doʊˈmeɪn ˈnɛvɚ dɪˈpɛndz ɑn ˈʧeɪnʤɪŋ ˈditeɪlz"},
    "clean_layers_52": {"texto":"Clean Architecture clearly separates concerns","fonetica":"klin ˈɑɹkɪtɛkʧɚ ˈklɪɹli ˈsɛpəɹeɪts kənˈsɝnz"},
    "clean_layers_53": {"texto":"Each layer has a specific purpose","fonetica":"iʧ ˈleɪɚɹ hæz ə spəˈsɪfɪk ˈpɝpəs"},
    "clean_layers_54": {"texto":"Entities are independent of time","fonetica":"ˈɛntɪtiz ɑɹ ˌɪndɪˈpɛndənt əv taɪm"},
    "clean_layers_55": {"texto":"The application evolves without breaking the domain","fonetica":"ði ˌæplɪˈkeɪʃən ɪˈvɑlvz wɪˈθaʊt ˈbɹeɪkɪŋ ðə doʊˈmeɪn"},
    "clean_layers_56": {"texto":"Use cases keep business logic clear","fonetica":"juz ˈkeɪsɪz kip ˈbɪznəs ˈlɑʤɪk klɪɹ"},
    "clean_layers_57": {"texto":"Infrastructure depends on the application, not the reverse","fonetica":"ˈɪnfɹəˌstɹʌkʧɚ dɪˈpɛndz ɑn ði ˌæplɪˈkeɪʃən nɑt ðə ɹɪˈvɝs"},
    "clean_layers_58": {"texto":"The UI connects through adapters","fonetica":"ði ˈju ˈaɪ kəˈnɛkts θɹu əˈdæptɚz"},
    "clean_layers_59": {"texto":"The core doesn't know external details","fonetica":"ðə kɔɹ ˈdʌzənt noʊ ɪkˈstɝnəl ˈditeɪlz"},
    "clean_layers_60": {"texto":"The architecture centralizes business logic","fonetica":"ði ˈɑɹkɪtɛkʧɚ ˈsɛntɹəˌlaɪzɪz ˈbɪznəs ˈlɑʤɪk"},
    "clean_principios_61": {"texto":"The dependency inversion principle is key to Clean Architecture","fonetica":"ðə dɪˈpɛndənsi ɪnˈvɝʒən ˈpɹɪnsəpəl ɪz ki tə klin ˈɑɹkɪtɛkʧɚ"},
    "clean_principios_62": {"texto":"Details depend on abstractions, not the reverse","fonetica":"ˈditeɪlz dɪˈpɛnd ɑn æbˈstɹækʃənz nɑt ðə ɹɪˈvɝs"},
    "clean_principios_63": {"texto":"Clean Architecture separates the what from the how","fonetica":"klin ˈɑɹkɪtɛkʧɚ ˈsɛpəɹeɪts ðə wʌt fɹəm ðə haʊ"},
    "clean_principios_64": {"texto":"The domain represents the most stable business rules","fonetica":"ðə doʊˈmeɪn ˌɹɛprɪˈzɛnts ðə moʊst ˈsteɪbəl ˈbɪznəs ɹulz"},
    "clean_principios_65": {"texto":"Infrastructure changes with technology","fonetica":"ˈɪnfɹəˌstɹʌkʧɚ ˈʧeɪnʤɪz wɪð tɛkˈnɑləʤi"},
    "clean_principios_66": {"texto":"Use cases describe business interactions","fonetica":"juz ˈkeɪsɪz dɪˈskɹaɪb ˈbɪznəs ˌɪntɚˈækʃənz"},
    "clean_principios_67": {"texto":"The core is stable and resistant to changes","fonetica":"ðə kɔɹ ɪz ˈsteɪbəl ænd ɹɪˈzɪstənt tə ˈʧeɪnʤɪz"},
    "clean_principios_68": {"texto":"Layer separation reduces coupling","fonetica":"ˈleɪɚɹ ˌsɛpəˈɹeɪʃən ɹɪˈdusɪz ˈkʌplɪŋ"},
    "clean_principios_69": {"texto":"Each layer only knows about the inner one","fonetica":"iʧ ˈleɪɚɹ ˈoʊnli noʊz əˈbaʊt ði ˈɪnɚ wʌn"},
    "clean_principios_70": {"texto":"Testing is simplified by isolating logic","fonetica":"ˈtɛstɪŋ ɪz ˈsɪmplɪfaɪd baɪ ˈaɪsəleɪtɪŋ ˈlɑʤɪk"},
    "clean_principios_71": {"texto":"The domain doesn't depend on the database","fonetica":"ðə doʊˈmeɪn ˈdʌzənt dɪˈpɛnd ɑn ðə ˈdeɪtəˌbeɪs"},
    "clean_principios_72": {"texto":"The UI can be replaced without touching the domain","fonetica":"ði ˈju ˈaɪ kæn bi ɹiˈpleɪst wɪˈθaʊt ˈtʌʧɪŋ ðə doʊˈmeɪn"},
    "clean_principios_73": {"texto":"The design facilitates system scalability","fonetica":"ðə dɪˈzaɪn fəˈsɪləteɪts ˈsɪstəm ˌskeɪləˈbɪlɪti"},
    "clean_principios_74": {"texto":"Clean Architecture minimizes external dependencies","fonetica":"klin ˈɑɹkɪtɛkʧɚ ˈmɪnɪmaɪzɪz ɪkˈstɝnəl dɪˈpɛndənsiz"},
    "clean_principios_75": {"texto":"The domain remains pure and consistent","fonetica":"ðə doʊˈmeɪn ɹɪˈmeɪnz pjʊɹ ænd kənˈsɪstənt"},
    "clean_principios_76": {"texto":"Technical details are replaceable","fonetica":"ˈtɛknɪkəl ˈditeɪlz ɑɹ ɹiˈpleɪsəbəl"},
    "clean_principios_77": {"texto":"The architecture encourages code reuse","fonetica":"ði ˈɑɹkɪtɛkʧɚ ɪnˈkɝɪʤɪz koʊd ɹiˈjuz"},
    "clean_principios_78": {"texto":"Use cases express clear intentions","fonetica":"juz ˈkeɪsɪz ɪkˈspɹɛs klɪɹ ɪnˈtɛnʃənz"},
    "clean_principios_79": {"texto":"The domain is independent of the external environment","fonetica":"ðə doʊˈmeɪn ɪz ˌɪndɪˈpɛndənt əv ði ɪkˈstɝnəl ɪnˈvaɪɹənmənt"},
    "clean_principios_80": {"texto":"Clean Architecture prevents system rigidity","fonetica":"klin ˈɑɹkɪtɛkʧɚ pɹɪˈvɛnts ˈsɪstəm ɹɪˈʤɪdɪti"},
    "clean_principios_81": {"texto":"Maintainability improves by reducing dependencies","fonetica":"ˌmeɪntənəˈbɪlɪti ɪmˈpɹuvz baɪ ɹɪˈdusɪŋ dɪˈpɛndənsiz"},
    "clean_principios_82": {"texto":"The system withstands unexpected changes","fonetica":"ðə ˈsɪstəm wɪθˈstændz ˌʌnɪkˈspɛktɪd ˈʧeɪnʤɪz"},
    "clean_principios_83": {"texto":"Clean Architecture facilitates portability","fonetica":"klin ˈɑɹkɪtɛkʧɚ fəˈsɪləteɪts ˌpɔɹtəˈbɪlɪti"},
    "clean_principios_84": {"texto":"Layer separation improves understanding","fonetica":"ˈleɪɚɹ ˌsɛpəˈɹeɪʃən ɪmˈpɹuvz ˌʌndɚˈstændɪŋ"},
    "clean_principios_85": {"texto":"Each layer has a clear responsibility","fonetica":"iʧ ˈleɪɚɹ hæz ə klɪɹ ɹɪˌspɑnsəˈbɪlɪti"},
    "clean_principios_86": {"texto":"Frameworks don't dictate the architecture","fonetica":"ˈfɹeɪmwɝks doʊnt ˈdɪkteɪt ði ˈɑɹkɪtɛkʧɚ"},
    "clean_principios_87": {"texto":"Clean Architecture prioritizes core logic","fonetica":"klin ˈɑɹkɪtɛkʧɚ pɹaɪˈɔɹətaɪzɪz kɔɹ ˈlɑʤɪk"},
    "clean_principios_88": {"texto":"The core defines business policies","fonetica":"ðə kɔɹ dɪˈfaɪnz ˈbɪznəs ˈpɑləˌsiz"},
    "clean_principios_89": {"texto":"Infrastructure implements external details","fonetica":"ˈɪnfɹəˌstɹʌkʧɚ ˈɪmplɪmɛnts ɪkˈstɝnəl ˈditeɪlz"},
    "clean_principios_90": {"texto":"Adapters connect the external layers","fonetica":"əˈdæptɚz kəˈnɛkt ði ɪkˈstɝnəl ˈleɪɚz"},
    "clean_avanzado_91": {"texto":"Clean Architecture reduces the cost of change","fonetica":"klin ˈɑɹkɪtɛkʧɚ ɹɪˈdusɪz ðə kɔst əv ˈʧeɪnʤ"},
    "clean_avanzado_92": {"texto":"The system evolves without rewriting the core","fonetica":"ðə ˈsɪstəm ɪˈvɑlvz wɪˈθaʊt ɹiˈɹaɪtɪŋ ðə kɔɹ"},
    "clean_avanzado_93": {"texto":"Domain independence ensures stability","fonetica":"doʊˈmeɪn ˌɪndɪˈpɛndəns ɪnˈʃʊɚz stəˈbɪlɪti"},
    "clean_avanzado_94": {"texto":"Infrastructure can be easily substituted","fonetica":"ˈɪnfɹəˌstɹʌkʧɚ kæn bi ˈizəli ˈsʌbstɪtutɪd"},
    "clean_avanzado_95": {"texto":"Use cases define repeatable behaviors","fonetica":"juz ˈkeɪsɪz dɪˈfaɪn ɹɪˈpitəbəl bɪˈheɪvjɚz"},
    "clean_avanzado_96": {"texto":"The domain maintains business integrity","fonetica":"ðə doʊˈmeɪn meɪnˈteɪnz ˈbɪznəs ɪnˈtɛɡɹɪti"},
    "clean_avanzado_97": {"texto":"Clean Architecture protects against external changes","fonetica":"klin ˈɑɹkɪtɛkʧɚ pɹəˈtɛkts əˈɡɛnst ɪkˈstɝnəl ˈʧeɪnʤɪz"},
    "clean_avanzado_98": {"texto":"Dependency inversion maintains order","fonetica":"dɪˈpɛndənsi ɪnˈvɝʒən meɪnˈteɪnz ˈɔɹdɚ"},
    "clean_avanzado_99": {"texto":"Inner layers never know infrastructure details","fonetica":"ˈɪnɚ ˈleɪɚz ˈnɛvɚ noʊ ˈɪnfɹəˌstɹʌkʧɚ ˈditeɪlz"},
    "clean_avanzado_100": {"texto":"The UI is just a replaceable detail","fonetica":"ði ˈju ˈaɪ ɪz ˈʤʌst ə ɹiˈpleɪsəbəl ˈditeɪl"},
    "clean_avanzado_101": {"texto":"Clean design fosters team collaboration","fonetica":"klin dɪˈzaɪn ˈfɑstɚz tim kəˌlæbəˈɹeɪʃən"},
    "clean_avanzado_102": {"texto":"Clear layers improve documentation","fonetica":"klɪɹ ˈleɪɚz ɪmˈpɹuv ˌdɑkjəmɛnˈteɪʃən"},
    "clean_avanzado_103": {"texto":"The domain defines the business ubiquitous language","fonetica":"ðə doʊˈmeɪn dɪˈfaɪnz ðə ˈbɪznəs juˈbɪkwɪtəs ˈlæŋɡwɪʤ"},
    "clean_avanzado_104": {"texto":"Clean Architecture avoids circular dependencies","fonetica":"klin ˈɑɹkɪtɛkʧɚ əˈvɔɪdz ˈsɝkjəlɚ dɪˈpɛndənsiz"},
    "clean_avanzado_105": {"texto":"Unit tests focus on business rules","fonetica":"ˈjunɪt tɛsts ˈfoʊkəs ɑn ˈbɪznəs ɹulz"},
    "clean_avanzado_106": {"texto":"Infrastructure only executes domain instructions","fonetica":"ˈɪnfɹəˌstɹʌkʧɚ ˈoʊnli ˈɛksɪkjuts doʊˈmeɪn ɪnˈstɹʌkʃənz"},
    "clean_avanzado_107": {"texto":"Concentric layers protect the system core","fonetica":"kənˈsɛntɹɪk ˈleɪɚz pɹəˈtɛkt ðə ˈsɪstəm kɔɹ"},
    "clean_avanzado_108": {"texto":"The domain is the most valuable part of the software","fonetica":"ðə doʊˈmeɪn ɪz ðə moʊst ˈvæljuəbəl pɑɹt əv ðə ˈsɔftwɛɹ"},
    "clean_avanzado_109": {"texto":"Technical details change, rules don't","fonetica":"ˈtɛknɪkəl ˈditeɪlz ˈʧeɪnʤ ɹulz doʊnt"},
    "clean_avanzado_110": {"texto":"Clean Architecture facilitates continuous integration","fonetica":"klin ˈɑɹkɪtɛkʧɚ fəˈsɪləteɪts kənˈtɪnjuəs ˌɪntɪˈɡɹeɪʃən"},
    "clean_avanzado_111": {"texto":"The system is more reliable with well-defined layers","fonetica":"ðə ˈsɪstəm ɪz mɔɹ ɹɪˈlaɪəbəl wɪð wɛl dɪˈfaɪnd ˈleɪɚz"},
    "clean_avanzado_112": {"texto":"Clean Architecture supports extensibility","fonetica":"klin ˈɑɹkɪtɛkʧɚ səˈpɔɹts ɪkˌstɛnsəˈbɪlɪti"},
    "clean_avanzado_113": {"texto":"Solid principles support Clean Architecture","fonetica":"ˈsɑlɪd ˈpɹɪnsəpəlz səˈpɔɹt klin ˈɑɹkɪtɛkʧɚ"},
    "clean_avanzado_114": {"texto":"The system core is stable and predictable","fonetica":"ðə ˈsɪstəm kɔɹ ɪz ˈsteɪbəl ænd pɹɪˈdɪktəbəl"},
    "clean_avanzado_115": {"texto":"External details can be replaced without risk","fonetica":"ɪkˈstɝnəl ˈditeɪlz kæn bi ɹiˈpleɪst wɪˈθaʊt ɹɪsk"},
    "clean_avanzado_116": {"texto":"Clean Architecture drives software quality","fonetica":"klin ˈɑɹkɪtɛkʧɚ dɹaɪvz ˈsɔftwɛɹ ˈkwɑlɪti"},
    "clean_avanzado_117": {"texto":"Technology independence ensures longevity","fonetica":"tɛkˈnɑləʤi ˌɪndɪˈpɛndəns ɪnˈʃʊɚz lɑnˈʤɛvɪti"},
    "clean_avanzado_118": {"texto":"Use cases are the bridge between domain and infrastructure","fonetica":"juz ˈkeɪsɪz ɑɹ ðə bɹɪʤ bɪˈtwin doʊˈmeɪn ænd ˈɪnfɹəˌstɹʌkʧɚ"},
    "clean_avanzado_119": {"texto":"The software core doesn't change with technology","fonetica":"ðə ˈsɔftwɛɹ kɔɹ ˈdʌzənt ˈʧeɪnʤ wɪð tɛkˈnɑləʤi"},
    "clean_avanzado_120": {"texto":"Clean Architecture is a guide for sustainable systems","fonetica":"klin ˈɑɹkɪtɛkʧɚ ɪz ə ɡaɪd fɔɹ səˈsteɪnəbəl ˈsɪstəmz"}
  }